'''
완전탐색 문제 - 이 문제는 다음에도 한 번 더 풀자.

왼쪽 상단에서 출발하여 우측 하단으로 이동할 때, 
특정 룰을 만족하면서 이동에 성공할 수 있는 경우의 수를 구하는 프로그램

<문제의 조건>
1. 이동은 항상 점프를 통해서만 가능합니다. 또, 점프 진행시 항상 현재 위치에 적혀있는 색과, 점프한 이후의 칸에 적혀있는 색이 달라야만 합니다.
2. 점프 진행시 현재 위치에서 적어도 한칸 이상 오른쪽에 있는 위치이며 동시에 현재 위치에서 적어도 한칸 이상 아래쪽에 있는 위치인 곳으로만 점프가 가능합니다.
3. 정확히 시작, 도착 지점을 제외하고 점프하며 도달한 위치가 정확히 2곳 뿐이어야 합니다.
'''

# r: 직사각형의 세로변 / c : 직사각형의 가로변
r, c = tuple(map(int, input().split()))

# R * C 크기의 직사각형이 W B 로 입력받아 채워짐.
grid = [
    list(map(str, input().split()))
    for _ in range(r)
]

cnt = 0

# 조건 3 만족 => 이중 반복문으로 (1, 1) 부터 완전탐색해서 첫 번째 점프할 위치를 찾는다.
for i in range(1, r):
    for j in range(1, c):
        # 조건 2 만족 => 이중 반복문으로 (i+1, j+1) 부터 시작하여 현재 위치에서 적어도 한칸 이상 오른쪽, 한칸 이상 아래쪽에 있는 위치인 곳만 점프 가능하게 함.
        # 조건 3 만족 => 이중 반복문으로 (r-2, c-2) 까지 완전탐색해서 두 번째 점프할 위치를 찾는다.
        for k in range(i+1, r-1):
            for l in range(j+1, c-1):
                # 조건 1 만족 => 현재 위치에 있는 색깔과 다음 위치에 있는 색깔이 다른지 3중 조건문을 통해 확인 후 count
                if grid[0][0] != grid[i][j]:
                    if grid[i][j] != grid[k][l]:
                        if grid[k][l] != grid[r-1][c-1]:
                            cnt += 1

# 출력
print(cnt)